{"version":3,"sources":["pkcs8.js"],"names":[],"mappings":"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","file":"pkcs8-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs8: readPkcs8,\n\twrite: write,\n\twritePkcs8: writePkcs8,\n\n\treadECDSACurve: readECDSACurve,\n\twriteECDSACurve: writeECDSACurve\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs8'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs8'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs8(alg, type, der) {\n\t/* Private keys in pkcs#8 format have a weird extra int */\n\tif (der.peek() === asn1.Ber.Integer) {\n\t\tassert.strictEqual(type, 'private',\n\t\t    'unexpected Integer at start of public key');\n\t\tder.readString(asn1.Ber.Integer, true);\n\t}\n\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tswitch (oid) {\n\tcase '1.2.840.113549.1.1.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8RSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8RSAPrivate(der));\n\tcase '1.2.840.10040.4.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8DSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8DSAPrivate(der));\n\tcase '1.2.840.10045.2.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8ECDSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8ECDSAPrivate(der));\n\tdefault:\n\t\tthrow (new Error('Unknown key type OID ' + oid));\n\t}\n}\n\nfunction readPkcs8RSAPublic(der) {\n\t// Null -- XXX this probably isn't good practice\n\tder.readByte();\n\tder.readByte();\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\tder.readSequence();\n\n\t// modulus\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tsource: der.originalInput,\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8RSAPrivate(der) {\n\tder.readByte();\n\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar ver = readMPInt(der, 'version');\n\tassert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8DSAPublic(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\n\tvar y = readMPInt(der, 'y');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8DSAPrivate(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar x = readMPInt(der, 'x');\n\n\t/* The pkcs#8 format does not include the public key */\n\tvar y = utils.calculateDSAPublic(g, p, x);\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readECDSACurve(der) {\n\tvar curveName, curveNames;\n\tvar j, c, cd;\n\n\tif (der.peek() === asn1.Ber.OID) {\n\t\tvar oid = der.readOID();\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tif (cd.pkcs8oid === oid) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.readSequence();\n\t\tvar version = der.readString(asn1.Ber.Integer, true);\n\t\tassert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n\n\t\tvar curve = {};\n\n\t\t// FieldID sequence\n\t\tder.readSequence();\n\t\tvar fieldTypeOid = der.readOID();\n\t\tassert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',\n\t\t    'ECDSA key is not from a prime-field');\n\t\tvar p = curve.p = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\t/*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */\n\t\tcurve.size = p.length * 8 - utils.countZeros(p);\n\n\t\t// Curve sequence\n\t\tder.readSequence();\n\t\tcurve.a = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tcurve.b = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tif (der.peek() === asn1.Ber.BitString)\n\t\t\tcurve.s = der.readString(asn1.Ber.BitString, true);\n\n\t\t// Combined Gx and Gy\n\t\tcurve.G = der.readString(asn1.Ber.OctetString, true);\n\t\tassert.strictEqual(curve.G[0], 0x4,\n\t\t    'uncompressed G is required');\n\n\t\tcurve.n = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tcurve.h = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tassert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +\n\t\t    'required');\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tvar ks = Object.keys(curve);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tvar equal = true;\n\t\t\tfor (var i = 0; i < ks.length; ++i) {\n\t\t\t\tvar k = ks[i];\n\t\t\t\tif (cd[k] === undefined)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (typeof (cd[k]) === 'object' &&\n\t\t\t\t    cd[k].equals !== undefined) {\n\t\t\t\t\tif (!cd[k].equals(curve[k])) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (Buffer.isBuffer(cd[k])) {\n\t\t\t\t\tif (cd[k].toString('binary')\n\t\t\t\t\t    !== curve[k].toString('binary')) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (cd[k] !== curve[k]) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (equal) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (curveName);\n}\n\nfunction readPkcs8ECDSAPrivate(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar version = readMPInt(der, 'version');\n\tassert.equal(version[0], 1, 'unknown version of ECDSA key');\n\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\tder.readSequence(0xa1);\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curveName) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8ECDSAPublic(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curveName) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction writePkcs8(der, key) {\n\tder.startSequence();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tvar sillyInt = new Buffer(1);\n\t\tsillyInt[0] = 0x0;\n\t\tder.writeBuffer(sillyInt, asn1.Ber.Integer);\n\t}\n\n\tder.startSequence();\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tder.writeOID('1.2.840.113549.1.1.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8RSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8RSAPublic(key, der);\n\t\tbreak;\n\tcase 'dsa':\n\t\tder.writeOID('1.2.840.10040.4.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8DSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8DSAPublic(key, der);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tder.writeOID('1.2.840.10045.2.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8ECDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8ECDSAPublic(key, der);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported key type: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPrivate(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = new Buffer(1);\n\tversion[0] = 0;\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPublic(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\n\tder.startSequence();\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPrivate(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPublic(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writeECDSACurve(key, der) {\n\tvar curve = algs.curves[key.curve];\n\tif (curve.pkcs8oid) {\n\t\t/* This one has a name in pkcs#8, so just write the oid */\n\t\tder.writeOID(curve.pkcs8oid);\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.startSequence();\n\n\t\tvar version = new Buffer(1);\n\t\tversion.writeUInt8(1, 0);\n\t\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\t\t// FieldID sequence\n\t\tder.startSequence();\n\t\tder.writeOID('1.2.840.10045.1.1'); // prime-field\n\t\tder.writeBuffer(curve.p, asn1.Ber.Integer);\n\t\tder.endSequence();\n\n\t\t// Curve sequence\n\t\tder.startSequence();\n\t\tvar a = curve.p;\n\t\tif (a[0] === 0x0)\n\t\t\ta = a.slice(1);\n\t\tder.writeBuffer(a, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.b, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.s, asn1.Ber.BitString);\n\t\tder.endSequence();\n\n\t\tder.writeBuffer(curve.G, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.n, asn1.Ber.Integer);\n\t\tvar h = curve.h;\n\t\tif (!h) {\n\t\t\th = new Buffer(1);\n\t\t\th[0] = 1;\n\t\t}\n\t\tder.writeBuffer(h, asn1.Ber.Integer);\n\n\t\t// ECParameters\n\t\tder.endSequence();\n\t}\n}\n\nfunction writePkcs8ECDSAPublic(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs8ECDSAPrivate(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = new Buffer(1);\n\tversion[0] = 1;\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n\n\tder.endSequence();\n\tder.endSequence();\n}\n"]}