{"version":3,"sources":["sshpk-conv"],"names":[],"mappings":"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","file":"sshpk-conv-compiled.js","sourcesContent":["#!/usr/bin/env node\n// -*- mode: js -*-\n// vim: set filetype=javascript :\n// Copyright 2015 Joyent, Inc.  All rights reserved.\n\nvar dashdash = require('dashdash');\nvar sshpk = require('../lib/index');\nvar fs = require('fs');\nvar path = require('path');\nvar tty = require('tty');\nvar readline = require('readline');\nvar getPassword = require('getpass').getPass;\n\nvar options = [\n\t{\n\t\tnames: ['outformat', 't'],\n\t\ttype: 'string',\n\t\thelp: 'Output format'\n\t},\n\t{\n\t\tnames: ['informat', 'T'],\n\t\ttype: 'string',\n\t\thelp: 'Input format'\n\t},\n\t{\n\t\tnames: ['file', 'f'],\n\t\ttype: 'string',\n\t\thelp: 'Input file name (default stdin)'\n\t},\n\t{\n\t\tnames: ['out', 'o'],\n\t\ttype: 'string',\n\t\thelp: 'Output file name (default stdout)'\n\t},\n\t{\n\t\tnames: ['private', 'p'],\n\t\ttype: 'bool',\n\t\thelp: 'Produce a private key as output'\n\t},\n\t{\n\t\tnames: ['derive', 'd'],\n\t\ttype: 'string',\n\t\thelp: 'Output a new key derived from this one, with given algo'\n\t},\n\t{\n\t\tnames: ['identify', 'i'],\n\t\ttype: 'bool',\n\t\thelp: 'Print key metadata instead of converting'\n\t},\n\t{\n\t\tnames: ['comment', 'c'],\n\t\ttype: 'string',\n\t\thelp: 'Set key comment, if output format supports'\n\t},\n\t{\n\t\tnames: ['help', 'h'],\n\t\ttype: 'bool',\n\t\thelp: 'Shows this help text'\n\t}\n];\n\nif (require.main === module) {\n\tvar parser = dashdash.createParser({\n\t\toptions: options\n\t});\n\n\ttry {\n\t\tvar opts = parser.parse(process.argv);\n\t} catch (e) {\n\t\tconsole.error('sshpk-conv: error: %s', e.message);\n\t\tprocess.exit(1);\n\t}\n\n\tif (opts.help || opts._args.length > 1) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-conv: converts between SSH key formats\\n');\n\t\tconsole.error(help);\n\t\tconsole.error('\\navailable formats:');\n\t\tconsole.error('  - pem, pkcs1     eg id_rsa');\n\t\tconsole.error('  - ssh            eg id_rsa.pub');\n\t\tconsole.error('  - pkcs8          format you want for openssl');\n\t\tconsole.error('  - openssh        like output of ssh-keygen -o');\n\t\tconsole.error('  - rfc4253        raw OpenSSH wire format');\n\t\tprocess.exit(1);\n\t}\n\n\t/*\n\t * Key derivation can only be done on private keys, so use of the -d\n\t * option necessarily implies -p.\n\t */\n\tif (opts.derive)\n\t\topts.private = true;\n\n\tvar inFile = process.stdin;\n\tvar inFileName = 'stdin';\n\n\tvar inFilePath;\n\tif (opts.file) {\n\t\tinFilePath = opts.file;\n\t} else if (opts._args.length === 1) {\n\t\tinFilePath = opts._args[0];\n\t}\n\n\tif (inFilePath)\n\t\tinFileName = path.basename(inFilePath);\n\n\ttry {\n\t\tif (inFilePath) {\n\t\t\tfs.accessSync(inFilePath, fs.R_OK);\n\t\t\tinFile = fs.createReadStream(inFilePath);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('sshpk-conv: error opening input file' +\n\t\t     ': ' + e.name + ': ' + e.message);\n\t\tprocess.exit(1);\n\t}\n\n\tvar outFile = process.stdout;\n\n\ttry {\n\t\tif (opts.out && !opts.identify) {\n\t\t\tfs.accessSync(path.dirname(opts.out), fs.W_OK);\n\t\t\toutFile = fs.createWriteStream(opts.out);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('sshpk-conv: error opening output file' +\n\t\t    ': ' + e.name + ': ' + e.message);\n\t\tprocess.exit(1);\n\t}\n\n\tvar bufs = [];\n\tinFile.on('readable', function () {\n\t\tvar data;\n\t\twhile ((data = inFile.read()))\n\t\t\tbufs.push(data);\n\t});\n\tvar parseOpts = {};\n\tparseOpts.filename = inFileName;\n\tinFile.on('end', function processKey() {\n\t\tvar buf = Buffer.concat(bufs);\n\t\tvar fmt = 'auto';\n\t\tif (opts.informat)\n\t\t\tfmt = opts.informat;\n\t\tvar f = sshpk.parseKey;\n\t\tif (opts.private)\n\t\t\tf = sshpk.parsePrivateKey;\n\t\ttry {\n\t\t\tvar key = f(buf, fmt, parseOpts);\n\t\t} catch (e) {\n\t\t\tif (e.name === 'KeyEncryptedError') {\n\t\t\t\tgetPassword(function (err, pw) {\n\t\t\t\t\tparseOpts.passphrase = pw;\n\t\t\t\t\tprocessKey();\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.error('sshpk-conv: ' +\n\t\t\t    e.name + ': ' + e.message);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (opts.derive)\n\t\t\tkey = key.derive(opts.derive);\n\n\t\tif (opts.comment)\n\t\t\tkey.comment = opts.comment;\n\n\t\tif (!opts.identify) {\n\t\t\tfmt = undefined;\n\t\t\tif (opts.outformat)\n\t\t\t\tfmt = opts.outformat;\n\t\t\toutFile.write(key.toBuffer(fmt));\n\t\t\tif (fmt === 'ssh' ||\n\t\t\t    (!opts.private && fmt === undefined))\n\t\t\t\toutFile.write('\\n');\n\t\t\toutFile.once('drain', function () {\n\t\t\t\tprocess.exit(0);\n\t\t\t});\n\t\t} else {\n\t\t\tvar kind = 'public';\n\t\t\tif (sshpk.PrivateKey.isPrivateKey(key))\n\t\t\t\tkind = 'private';\n\t\t\tconsole.log('%s: a %d bit %s %s key', inFileName,\n\t\t\t    key.size, key.type.toUpperCase(), kind);\n\t\t\tif (key.type === 'ecdsa')\n\t\t\t\tconsole.log('ECDSA curve: %s', key.curve);\n\t\t\tif (key.comment)\n\t\t\t\tconsole.log('Comment: %s', key.comment);\n\t\t\tconsole.log('Fingerprint:');\n\t\t\tconsole.log('  ' + key.fingerprint().toString());\n\t\t\tconsole.log('  ' + key.fingerprint('md5').toString());\n\t\t\tprocess.exit(0);\n\t\t}\n\t});\n}\n"]}