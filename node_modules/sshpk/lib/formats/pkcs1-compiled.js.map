{"version":3,"sources":["pkcs1.js"],"names":[],"mappings":";;AAEA,OAAO,OAAP,GAAiB;AAChB,OAAM,IADU;AAEhB,YAAW,SAFK;AAGhB,QAAO,KAHS;AAIhB,aAAY;AAJI,CAAjB;;AAOA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,SAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;;AAEA,IAAI,MAAM,QAAQ,QAAR,CAAV;AACA,IAAI,aAAa,QAAQ,gBAAR,CAAjB;AACA,IAAI,MAAM,QAAQ,OAAR,CAAV;;AAEA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;AACA,IAAI,iBAAiB,MAAM,cAA3B;;AAEA,SAAS,IAAT,CAAc,GAAd,EAAmB,OAAnB,EAA4B;AAC3B,QAAQ,IAAI,IAAJ,CAAS,GAAT,EAAc,OAAd,EAAuB,OAAvB,CAAR;AACA;;AAED,SAAS,KAAT,CAAe,GAAf,EAAoB,OAApB,EAA6B;AAC5B,QAAQ,IAAI,KAAJ,CAAU,GAAV,EAAe,OAAf,EAAwB,OAAxB,CAAR;AACA;;;AAGD,SAAS,SAAT,CAAmB,GAAnB,EAAwB,EAAxB,EAA4B;AAC3B,QAAO,WAAP,CAAmB,IAAI,IAAJ,EAAnB,EAA+B,KAAK,GAAL,CAAS,OAAxC,EACI,KAAK,oBADT;AAEA,QAAQ,MAAM,WAAN,CAAkB,IAAI,UAAJ,CAAe,KAAK,GAAL,CAAS,OAAxB,EAAiC,IAAjC,CAAlB,CAAR;AACA;;AAED,SAAS,SAAT,CAAmB,GAAnB,EAAwB,IAAxB,EAA8B,GAA9B,EAAmC;AAClC,SAAQ,GAAR;AACA,OAAK,KAAL;AACC,OAAI,SAAS,QAAb,EACC,OAAQ,mBAAmB,GAAnB,CAAR,CADD,KAEK,IAAI,SAAS,SAAb,EACJ,OAAQ,oBAAoB,GAApB,CAAR;AACD,SAAO,IAAI,KAAJ,CAAU,uBAAuB,IAAjC,CAAP;AACD,OAAK,KAAL;AACC,OAAI,SAAS,QAAb,EACC,OAAQ,mBAAmB,GAAnB,CAAR,CADD,KAEK,IAAI,SAAS,SAAb,EACJ,OAAQ,oBAAoB,GAApB,CAAR;AACD,SAAO,IAAI,KAAJ,CAAU,uBAAuB,IAAjC,CAAP;AACD,OAAK,IAAL;AACA,OAAK,OAAL;AACC,OAAI,SAAS,SAAb,EACC,OAAQ,sBAAsB,GAAtB,CAAR,CADD,KAEK,IAAI,SAAS,QAAb,EACJ,OAAQ,qBAAqB,GAArB,CAAR;AACD,SAAO,IAAI,KAAJ,CAAU,uBAAuB,IAAjC,CAAP;AACD;AACC,SAAO,IAAI,KAAJ,CAAU,uBAAuB,GAAjC,CAAP;AArBD;AAuBA;;AAED,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;;AAEhC,KAAI,IAAI,UAAU,GAAV,EAAe,SAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,UAAf,CAAR;;;AAGA,KAAI,MAAM;AACT,QAAM,KADG;AAET,SAAO,CACN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EADM,EAEN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAFM;AAFE,EAAV;;AAQA,QAAQ,IAAI,GAAJ,CAAQ,GAAR,CAAR;AACA;;AAED,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AACjC,KAAI,UAAU,UAAU,GAAV,EAAe,SAAf,CAAd;AACA,QAAO,WAAP,CAAmB,QAAQ,CAAR,CAAnB,EAA+B,CAA/B;;;AAGA,KAAI,IAAI,UAAU,GAAV,EAAe,SAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,iBAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,kBAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,QAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,QAAf,CAAR;AACA,KAAI,QAAQ,UAAU,GAAV,EAAe,WAAf,CAAZ;AACA,KAAI,QAAQ,UAAU,GAAV,EAAe,WAAf,CAAZ;AACA,KAAI,OAAO,UAAU,GAAV,EAAe,MAAf,CAAX;;;AAGA,KAAI,MAAM;AACT,QAAM,KADG;AAET,SAAO,CACN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EADM,EAEN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAFM,EAGN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAHM,EAIN,EAAE,MAAM,MAAR,EAAgB,MAAM,IAAtB,EAJM,EAKN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EALM,EAMN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EANM,EAON,EAAE,MAAM,OAAR,EAAiB,MAAM,KAAvB,EAPM,EAQN,EAAE,MAAM,OAAR,EAAiB,MAAM,KAAvB,EARM;AAFE,EAAV;;AAcA,QAAQ,IAAI,UAAJ,CAAe,GAAf,CAAR;AACA;;AAED,SAAS,mBAAT,CAA6B,GAA7B,EAAkC;AACjC,KAAI,UAAU,UAAU,GAAV,EAAe,SAAf,CAAd;AACA,QAAO,WAAP,CAAmB,QAAQ,SAAR,CAAkB,CAAlB,CAAnB,EAAyC,CAAzC;;AAEA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;;;AAGA,KAAI,MAAM;AACT,QAAM,KADG;AAET,SAAO,CACN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EADM,EAEN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAFM,EAGN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAHM,EAIN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAJM,EAKN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EALM;AAFE,EAAV;;AAWA,QAAQ,IAAI,UAAJ,CAAe,GAAf,CAAR;AACA;;AAED,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAChC,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;AACA,KAAI,IAAI,UAAU,GAAV,EAAe,GAAf,CAAR;;AAEA,KAAI,MAAM;AACT,QAAM,KADG;AAET,SAAO,CACN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EADM,EAEN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAFM,EAGN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAHM,EAIN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAJM;AAFE,EAAV;;AAUA,QAAQ,IAAI,GAAJ,CAAQ,GAAR,CAAR;AACA;;AAED,SAAS,oBAAT,CAA8B,GAA9B,EAAmC;AAClC,KAAI,YAAJ;;AAEA,KAAI,MAAM,IAAI,OAAJ,EAAV;AACA,QAAO,WAAP,CAAmB,GAAnB,EAAwB,mBAAxB,EAA6C,qBAA7C;;AAEA,KAAI,WAAW,IAAI,OAAJ,EAAf;;AAEA,KAAI,KAAJ;AACA,KAAI,SAAS,OAAO,IAAP,CAAY,KAAK,MAAjB,CAAb;AACA,MAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,EAAE,CAArC,EAAwC;AACvC,MAAI,IAAI,OAAO,CAAP,CAAR;AACA,MAAI,KAAK,KAAK,MAAL,CAAY,CAAZ,CAAT;AACA,MAAI,GAAG,QAAH,KAAgB,QAApB,EAA8B;AAC7B,WAAQ,CAAR;AACA;AACA;AACD;AACD,QAAO,MAAP,CAAc,KAAd,EAAqB,2BAArB;;AAEA,KAAI,IAAI,IAAI,UAAJ,CAAe,KAAK,GAAL,CAAS,SAAxB,EAAmC,IAAnC,CAAR;AACA,KAAI,MAAM,WAAN,CAAkB,CAAlB,CAAJ;;AAEA,KAAI,MAAM;AACT,QAAM,OADG;AAET,SAAO,CACN,EAAE,MAAM,OAAR,EAAiB,MAAM,IAAI,MAAJ,CAAW,KAAX,CAAvB,EADM,EAEN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAFM;AAFE,EAAV;;AAQA,QAAQ,IAAI,GAAJ,CAAQ,GAAR,CAAR;AACA;;AAED,SAAS,qBAAT,CAA+B,GAA/B,EAAoC;AACnC,KAAI,UAAU,UAAU,GAAV,EAAe,SAAf,CAAd;AACA,QAAO,WAAP,CAAmB,QAAQ,SAAR,CAAkB,CAAlB,CAAnB,EAAyC,CAAzC;;;AAGA,KAAI,IAAI,IAAI,UAAJ,CAAe,KAAK,GAAL,CAAS,WAAxB,EAAqC,IAArC,CAAR;;AAEA,KAAI,YAAJ,CAAiB,IAAjB;AACA,KAAI,QAAQ,eAAe,GAAf,CAAZ;AACA,QAAO,MAAP,CAAc,KAAd,EAAqB,wBAArB;;AAEA,KAAI,YAAJ,CAAiB,IAAjB;AACA,KAAI,IAAI,IAAI,UAAJ,CAAe,KAAK,GAAL,CAAS,SAAxB,EAAmC,IAAnC,CAAR;AACA,KAAI,MAAM,WAAN,CAAkB,CAAlB,CAAJ;;AAEA,KAAI,MAAM;AACT,QAAM,OADG;AAET,SAAO,CACN,EAAE,MAAM,OAAR,EAAiB,MAAM,IAAI,MAAJ,CAAW,KAAX,CAAvB,EADM,EAEN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAFM,EAGN,EAAE,MAAM,GAAR,EAAa,MAAM,CAAnB,EAHM;AAFE,EAAV;;AASA,QAAQ,IAAI,UAAJ,CAAe,GAAf,CAAR;AACA;;AAED,SAAS,UAAT,CAAoB,GAApB,EAAyB,GAAzB,EAA8B;AAC7B,KAAI,aAAJ;;AAEA,SAAQ,IAAI,IAAZ;AACA,OAAK,KAAL;AACC,OAAI,WAAW,YAAX,CAAwB,GAAxB,CAAJ,EACC,qBAAqB,GAArB,EAA0B,GAA1B,EADD,KAGC,oBAAoB,GAApB,EAAyB,GAAzB;AACD;AACD,OAAK,KAAL;AACC,OAAI,WAAW,YAAX,CAAwB,GAAxB,CAAJ,EACC,qBAAqB,GAArB,EAA0B,GAA1B,EADD,KAGC,oBAAoB,GAApB,EAAyB,GAAzB;AACD;AACD,OAAK,OAAL;AACC,OAAI,WAAW,YAAX,CAAwB,GAAxB,CAAJ,EACC,uBAAuB,GAAvB,EAA4B,GAA5B,EADD,KAGC,sBAAsB,GAAtB,EAA2B,GAA3B;AACD;AACD;AACC,SAAO,IAAI,KAAJ,CAAU,uBAAuB,IAAI,IAArC,CAAP;AApBD;;AAuBA,KAAI,WAAJ;AACA;;AAED,SAAS,mBAAT,CAA6B,GAA7B,EAAkC,GAAlC,EAAuC;AACtC,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA;;AAED,SAAS,oBAAT,CAA8B,GAA9B,EAAmC,GAAnC,EAAwC;AACvC,KAAI,MAAM,IAAI,MAAJ,CAAW,CAAX,CAAV;AACA,KAAI,CAAJ,IAAS,CAAT;AACA,KAAI,WAAJ,CAAgB,GAAhB,EAAqB,KAAK,GAAL,CAAS,OAA9B;;AAEA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,CAAC,IAAI,IAAJ,CAAS,KAAV,IAAmB,CAAC,IAAI,IAAJ,CAAS,KAAjC,EACC,MAAM,aAAN,CAAoB,GAApB;AACD,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,KAAT,CAAe,IAA/B,EAAqC,KAAK,GAAL,CAAS,OAA9C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,KAAT,CAAe,IAA/B,EAAqC,KAAK,GAAL,CAAS,OAA9C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,IAAT,CAAc,IAA9B,EAAoC,KAAK,GAAL,CAAS,OAA7C;AACA;;AAED,SAAS,oBAAT,CAA8B,GAA9B,EAAmC,GAAnC,EAAwC;AACvC,KAAI,MAAM,IAAI,MAAJ,CAAW,CAAX,CAAV;AACA,KAAI,CAAJ,IAAS,CAAT;AACA,KAAI,WAAJ,CAAgB,GAAhB,EAAqB,KAAK,GAAL,CAAS,OAA9B;;AAEA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA;;AAED,SAAS,mBAAT,CAA6B,GAA7B,EAAkC,GAAlC,EAAuC;AACtC,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,OAA1C;AACA;;AAED,SAAS,qBAAT,CAA+B,GAA/B,EAAoC,GAApC,EAAyC;AACxC,KAAI,aAAJ;;AAEA,KAAI,QAAJ,CAAa,mBAAb,E;AACA,KAAI,QAAQ,IAAI,IAAJ,CAAS,KAAT,CAAe,IAAf,CAAoB,QAApB,EAAZ;AACA,KAAI,WAAW,KAAK,MAAL,CAAY,KAAZ,EAAmB,QAAlC;AACA,QAAO,MAAP,CAAc,QAAd,EAAwB,2BAAxB;AACA,KAAI,QAAJ,CAAa,QAAb;;AAEA,KAAI,WAAJ;;AAEA,KAAI,IAAI,MAAM,WAAN,CAAkB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA7B,EAAmC,IAAnC,CAAR;AACA,KAAI,WAAJ,CAAgB,CAAhB,EAAmB,KAAK,GAAL,CAAS,SAA5B;AACA;;AAED,SAAS,sBAAT,CAAgC,GAAhC,EAAqC,GAArC,EAA0C;AACzC,KAAI,MAAM,IAAI,MAAJ,CAAW,CAAX,CAAV;AACA,KAAI,CAAJ,IAAS,CAAT;AACA,KAAI,WAAJ,CAAgB,GAAhB,EAAqB,KAAK,GAAL,CAAS,OAA9B;;AAEA,KAAI,WAAJ,CAAgB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA3B,EAAiC,KAAK,GAAL,CAAS,WAA1C;;AAEA,KAAI,aAAJ,CAAkB,IAAlB;AACA,KAAI,QAAQ,IAAI,IAAJ,CAAS,KAAT,CAAe,IAAf,CAAoB,QAApB,EAAZ;AACA,KAAI,WAAW,KAAK,MAAL,CAAY,KAAZ,EAAmB,QAAlC;AACA,QAAO,MAAP,CAAc,QAAd,EAAwB,2BAAxB;AACA,KAAI,QAAJ,CAAa,QAAb;AACA,KAAI,WAAJ;;AAEA,KAAI,aAAJ,CAAkB,IAAlB;AACA,KAAI,IAAI,MAAM,WAAN,CAAkB,IAAI,IAAJ,CAAS,CAAT,CAAW,IAA7B,EAAmC,IAAnC,CAAR;AACA,KAAI,WAAJ,CAAgB,CAAhB,EAAmB,KAAK,GAAL,CAAS,SAA5B;AACA,KAAI,WAAJ;AACA","file":"pkcs1-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs1: readPkcs1,\n\twrite: write,\n\twritePkcs1: writePkcs1\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nvar pkcs8 = require('./pkcs8');\nvar readECDSACurve = pkcs8.readECDSACurve;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options, 'pkcs1'));\n}\n\nfunction write(key, options) {\n\treturn (pem.write(key, options, 'pkcs1'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs1(alg, type, der) {\n\tswitch (alg) {\n\tcase 'RSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1RSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1RSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'DSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1DSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1DSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EC':\n\tcase 'ECDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1ECDSAPrivate(der));\n\t\telse if (type === 'public')\n\t\t\treturn (readPkcs1ECDSAPublic(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + alg));\n\t}\n}\n\nfunction readPkcs1RSAPublic(der) {\n\t// modulus and exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1RSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version[0], 0);\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 0);\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\tvar y = readMPInt(der, 'y');\n\tvar x = readMPInt(der, 'x');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPublic(der) {\n\tvar y = readMPInt(der, 'y');\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPublic(der) {\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n\n\tvar curveOid = der.readOID();\n\n\tvar curve;\n\tvar curves = Object.keys(algs.curves);\n\tfor (var j = 0; j < curves.length; ++j) {\n\t\tvar c = curves[j];\n\t\tvar cd = algs.curves[c];\n\t\tif (cd.pkcs8oid === curveOid) {\n\t\t\tcurve = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tassert.string(curve, 'a known ECDSA named curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curve) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar curve = readECDSACurve(der);\n\tassert.string(curve, 'a known elliptic curve');\n\n\tder.readSequence(0xa1);\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curve) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction writePkcs1(der, key) {\n\tder.startSequence();\n\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1RSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1RSAPublic(der, key);\n\t\tbreak;\n\tcase 'dsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1DSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1DSAPublic(der, key);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1ECDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1ECDSAPublic(der, key);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs1RSAPublic(der, key) {\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1RSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 0;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 0;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPublic(der, key) {\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1ECDSAPublic(der, key) {\n\tder.startSequence();\n\n\tder.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs1ECDSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 1;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n}\n"]}