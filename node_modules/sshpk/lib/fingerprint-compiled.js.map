{"version":3,"sources":["fingerprint.js"],"names":[],"mappings":"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","file":"fingerprint-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = Fingerprint;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar errs = require('./errors');\nvar Key = require('./key');\nvar utils = require('./utils');\n\nvar FingerprintFormatError = errs.FingerprintFormatError;\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\n\nfunction Fingerprint(opts) {\n\tassert.object(opts, 'options');\n\tassert.buffer(opts.hash, 'options.hash');\n\tassert.string(opts.algorithm, 'options.algorithm');\n\n\tthis.algorithm = opts.algorithm.toLowerCase();\n\tif (algs.hashAlgs[this.algorithm] !== true)\n\t\tthrow (new InvalidAlgorithmError(this.algorithm));\n\n\tthis.hash = opts.hash;\n}\n\nFingerprint.prototype.toString = function (format) {\n\tif (format === undefined) {\n\t\tif (this.algorithm === 'md5')\n\t\t\tformat = 'hex';\n\t\telse\n\t\t\tformat = 'base64';\n\t}\n\tassert.string(format);\n\n\tswitch (format) {\n\tcase 'hex':\n\t\treturn (addColons(this.hash.toString('hex')));\n\tcase 'base64':\n\t\treturn (sshBase64Format(this.algorithm,\n\t\t    this.hash.toString('base64')));\n\tdefault:\n\t\tthrow (new FingerprintFormatError(undefined, format));\n\t}\n};\n\nFingerprint.prototype.matches = function (key) {\n\tassert.object(key, 'key');\n\tutils.assertCompatible(key, Key, [1, 0], 'key');\n\n\tvar theirHash = key.hash(this.algorithm);\n\tvar theirHash2 = crypto.createHash(this.algorithm).\n\t    update(theirHash).digest('base64');\n\n\tif (this.hash2 === undefined)\n\t\tthis.hash2 = crypto.createHash(this.algorithm).\n\t\t    update(this.hash).digest('base64');\n\n\treturn (this.hash2 === theirHash2);\n};\n\nFingerprint.parse = function (fp, enAlgs) {\n\tassert.string(fp, 'fingerprint');\n\n\tvar alg, hash;\n\tassert.optionalArrayOfString(enAlgs, 'algorithms');\n\n\tvar parts = fp.split(':');\n\tif (parts.length == 2) {\n\t\talg = parts[0].toLowerCase();\n\t\t/*JSSTYLED*/\n\t\tvar base64RE = /^[A-Za-z0-9+\\/=]+$/;\n\t\tif (!base64RE.test(parts[1]))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = new Buffer(parts[1], 'base64');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t} else if (parts.length > 2) {\n\t\talg = 'md5';\n\t\tif (parts[0].toLowerCase() === 'md5')\n\t\t\tparts = parts.slice(1);\n\t\tparts = parts.join('');\n\t\t/*JSSTYLED*/\n\t\tvar md5RE = /^[a-fA-F0-9]+$/;\n\t\tif (!md5RE.test(parts))\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\ttry {\n\t\t\thash = new Buffer(parts, 'hex');\n\t\t} catch (e) {\n\t\t\tthrow (new FingerprintFormatError(fp));\n\t\t}\n\t}\n\n\tif (alg === undefined)\n\t\tthrow (new FingerprintFormatError(fp));\n\n\tif (algs.hashAlgs[alg] === undefined)\n\t\tthrow (new InvalidAlgorithmError(alg));\n\n\tif (enAlgs !== undefined) {\n\t\tenAlgs = enAlgs.map(function (a) { return a.toLowerCase(); });\n\t\tif (enAlgs.indexOf(alg) === -1)\n\t\t\tthrow (new InvalidAlgorithmError(alg));\n\t}\n\n\treturn (new Fingerprint({algorithm: alg, hash: hash}));\n};\n\nfunction addColons(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/(.{2})(?=.)/g, '$1:'));\n}\n\nfunction base64Strip(s) {\n\t/*JSSTYLED*/\n\treturn (s.replace(/=*$/, ''));\n}\n\nfunction sshBase64Format(alg, h) {\n\treturn (alg.toUpperCase() + ':' + base64Strip(h));\n}\n\nFingerprint.isFingerprint = function (obj, ver) {\n\treturn (utils.isCompatible(obj, Fingerprint, ver));\n};\n\n/*\n * API versions for Fingerprint:\n * [1,0] -- initial ver\n * [1,1] -- first tagged ver\n */\nFingerprint.prototype._sshpkApiVersion = [1, 1];\n\nFingerprint._oldVersionDetect = function (obj) {\n\tassert.func(obj.toString);\n\tassert.func(obj.matches);\n\treturn ([1, 0]);\n};\n"]}