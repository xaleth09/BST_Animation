{"version":3,"sources":["ssh.js"],"names":[],"mappings":"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","file":"ssh-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar rfc4253 = require('./rfc4253');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar sshpriv = require('./ssh-private');\n\n/*JSSTYLED*/\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([\\n \\t]+([^\\n]+))?$/;\n/*JSSTYLED*/\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/ \\t\\n]+[=]*)(.*)$/;\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n\tvar m = trimmed.match(SSHKEY_RE);\n\tif (!m)\n\t\tm = trimmed.match(SSHKEY_RE2);\n\tassert.ok(m, 'key must match regex');\n\n\tvar type = rfc4253.algToKeyType(m[1]);\n\tvar kbuf = new Buffer(m[2], 'base64');\n\n\t/*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */\n\tvar key;\n\tvar ret = {};\n\tif (m[4]) {\n\t\ttry {\n\t\t\tkey = rfc4253.read(kbuf);\n\n\t\t} catch (e) {\n\t\t\tm = trimmed.match(SSHKEY_RE2);\n\t\t\tassert.ok(m, 'key must match regex');\n\t\t\tkbuf = new Buffer(m[2], 'base64');\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t\t}\n\t} else {\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t}\n\n\tassert.strictEqual(type, key.type);\n\n\tif (m[4] && m[4].length > 0) {\n\t\tkey.comment = m[4];\n\n\t} else if (ret.consumed) {\n\t\t/*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */\n\t\tvar data = m[2] + m[3];\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\n\t\t    data.slice(realOffset - 2);\n\n\t\tvar padding = ret.consumed % 3;\n\t\tif (padding > 0 &&\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\n\t\t\trealOffset--;\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\n\t\t\trealOffset++;\n\n\t\t/* Finally, grab what we think is the comment & clean it up. */\n\t\tvar trailer = data.slice(realOffset);\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\n\t\t    replace(/^\\s+/, '');\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\n\t\t\tkey.comment = trailer;\n\t}\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar parts = [];\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tparts.push(alg);\n\n\tvar buf = rfc4253.write(key);\n\tparts.push(buf.toString('base64'));\n\n\tif (key.comment)\n\t\tparts.push(key.comment);\n\n\treturn (new Buffer(parts.join(' ')));\n}\n"]}