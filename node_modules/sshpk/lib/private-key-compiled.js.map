{"version":3,"sources":["private-key.js"],"names":[],"mappings":"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","file":"private-key-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = PrivateKey;\n\nvar assert = require('assert-plus');\nvar algs = require('./algs');\nvar crypto = require('crypto');\nvar Fingerprint = require('./fingerprint');\nvar Signature = require('./signature');\nvar errs = require('./errors');\nvar util = require('util');\nvar utils = require('./utils');\nvar edCompat;\nvar ed;\n\ntry {\n\tedCompat = require('./ed-compat');\n} catch (e) {\n\t/* Just continue through, and bail out if we try to use it. */\n}\n\nvar Key = require('./key');\n\nvar InvalidAlgorithmError = errs.InvalidAlgorithmError;\nvar KeyParseError = errs.KeyParseError;\nvar KeyEncryptedError = errs.KeyEncryptedError;\n\nvar formats = {};\nformats['auto'] = require('./formats/auto');\nformats['pem'] = require('./formats/pem');\nformats['pkcs1'] = require('./formats/pkcs1');\nformats['pkcs8'] = require('./formats/pkcs8');\nformats['rfc4253'] = require('./formats/rfc4253');\nformats['ssh-private'] = require('./formats/ssh-private');\nformats['openssh'] = formats['ssh-private'];\nformats['ssh'] = formats['ssh-private'];\n\nfunction PrivateKey(opts) {\n\tassert.object(opts, 'options');\n\tKey.call(this, opts);\n\n\tthis._pubCache = undefined;\n}\nutil.inherits(PrivateKey, Key);\n\nPrivateKey.formats = formats;\n\nPrivateKey.prototype.toBuffer = function (format, options) {\n\tif (format === undefined)\n\t\tformat = 'pkcs1';\n\tassert.string(format, 'format');\n\tassert.object(formats[format], 'formats[format]');\n\tassert.optionalObject(options, 'options');\n\n\treturn (formats[format].write(this, options));\n};\n\nPrivateKey.prototype.hash = function (algo) {\n\treturn (this.toPublic().hash(algo));\n};\n\nPrivateKey.prototype.toPublic = function () {\n\tif (this._pubCache)\n\t\treturn (this._pubCache);\n\n\tvar algInfo = algs.info[this.type];\n\tvar pubParts = [];\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = algInfo.parts[i];\n\t\tpubParts.push(this.part[p]);\n\t}\n\n\tthis._pubCache = new Key({\n\t\ttype: this.type,\n\t\tsource: this,\n\t\tparts: pubParts\n\t});\n\tif (this.comment)\n\t\tthis._pubCache.comment = this.comment;\n\treturn (this._pubCache);\n};\n\nPrivateKey.prototype.derive = function (newType, newSize) {\n\tassert.string(newType, 'type');\n\tassert.optionalNumber(newSize, 'size');\n\tvar priv, pub;\n\n\tif (this.type === 'ed25519' && newType === 'curve25519') {\n\t\tif (ed === undefined)\n\t\t\ted = require('jodid25519');\n\n\t\tpriv = this.part.r.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\t\tpriv = priv.slice(0, 32);\n\n\t\tpub = ed.dh.publicKey(priv);\n\t\tpriv = utils.mpNormalize(Buffer.concat([priv, pub]));\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'R', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'r', data: priv }\n\t\t\t]\n\t\t}));\n\t} else if (this.type === 'curve25519' && newType === 'ed25519') {\n\t\tif (ed === undefined)\n\t\t\ted = require('jodid25519');\n\n\t\tpriv = this.part.r.data;\n\t\tif (priv[0] === 0x00)\n\t\t\tpriv = priv.slice(1);\n\t\tpriv = priv.slice(0, 32);\n\n\t\tpub = ed.eddsa.publicKey(priv.toString('binary'));\n\t\tpub = new Buffer(pub, 'binary');\n\n\t\tpriv = utils.mpNormalize(Buffer.concat([priv, pub]));\n\n\t\treturn (new PrivateKey({\n\t\t\ttype: 'ed25519',\n\t\t\tparts: [\n\t\t\t\t{ name: 'R', data: utils.mpNormalize(pub) },\n\t\t\t\t{ name: 'r', data: priv }\n\t\t\t]\n\t\t}));\n\t}\n\tthrow (new Error('Key derivation not supported from ' + this.type +\n\t    ' to ' + newType));\n};\n\nPrivateKey.prototype.createVerify = function (hashAlgo) {\n\treturn (this.toPublic().createVerify(hashAlgo));\n};\n\nPrivateKey.prototype.createSign = function (hashAlgo) {\n\tif (hashAlgo === undefined)\n\t\thashAlgo = this.defaultHashAlgorithm();\n\tassert.string(hashAlgo, 'hash algorithm');\n\n\t/* ED25519 is not supported by OpenSSL, use a javascript impl. */\n\tif (this.type === 'ed25519' && edCompat !== undefined)\n\t\treturn (new edCompat.Signer(this, hashAlgo));\n\tif (this.type === 'curve25519')\n\t\tthrow (new Error('Curve25519 keys are not suitable for ' +\n\t\t    'signing or verification'));\n\n\tvar v, nm, err;\n\ttry {\n\t\tnm = hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t} catch (e) {\n\t\terr = e;\n\t}\n\tif (v === undefined || (err instanceof Error &&\n\t    err.message.match(/Unknown message digest/))) {\n\t\tnm = 'RSA-';\n\t\tnm += hashAlgo.toUpperCase();\n\t\tv = crypto.createSign(nm);\n\t}\n\tassert.ok(v, 'failed to create verifier');\n\tvar oldSign = v.sign.bind(v);\n\tvar key = this.toBuffer('pkcs1');\n\tvar type = this.type;\n\tv.sign = function () {\n\t\tvar sig = oldSign(key);\n\t\tif (typeof (sig) === 'string')\n\t\t\tsig = new Buffer(sig, 'binary');\n\t\tsig = Signature.parse(sig, type, 'asn1');\n\t\tsig.hashAlgorithm = hashAlgo;\n\t\treturn (sig);\n\t};\n\treturn (v);\n};\n\nPrivateKey.parse = function (data, format, options) {\n\tif (typeof (data) !== 'string')\n\t\tassert.buffer(data, 'data');\n\tif (format === undefined)\n\t\tformat = 'auto';\n\tassert.string(format, 'format');\n\tif (typeof (options) === 'string')\n\t\toptions = { filename: options };\n\tassert.optionalObject(options, 'options');\n\tif (options === undefined)\n\t\toptions = {};\n\tassert.optionalString(options.filename, 'options.filename');\n\tif (options.filename === undefined)\n\t\toptions.filename = '(unnamed)';\n\n\tassert.object(formats[format], 'formats[format]');\n\n\ttry {\n\t\tvar k = formats[format].read(data, options);\n\t\tassert.ok(k instanceof PrivateKey, 'key is not a private key');\n\t\tif (!k.comment)\n\t\t\tk.comment = options.filename;\n\t\treturn (k);\n\t} catch (e) {\n\t\tif (e.name === 'KeyEncryptedError')\n\t\t\tthrow (e);\n\t\tthrow (new KeyParseError(options.filename, format, e));\n\t}\n};\n\nPrivateKey.isPrivateKey = function (obj, ver) {\n\treturn (utils.isCompatible(obj, PrivateKey, ver));\n};\n\n/*\n * API versions for PrivateKey:\n * [1,0] -- initial ver\n * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats\n * [1,2] -- added defaultHashAlgorithm\n * [1,3] -- added derive, ed, createDH\n * [1,4] -- first tagged version\n */\nPrivateKey.prototype._sshpkApiVersion = [1, 4];\n\nPrivateKey._oldVersionDetect = function (obj) {\n\tassert.func(obj.toPublic);\n\tassert.func(obj.createSign);\n\tif (obj.derive)\n\t\treturn ([1, 3]);\n\tif (obj.defaultHashAlgorithm)\n\t\treturn ([1, 2]);\n\tif (obj.formats['auto'])\n\t\treturn ([1, 1]);\n\treturn ([1, 0]);\n};\n"]}