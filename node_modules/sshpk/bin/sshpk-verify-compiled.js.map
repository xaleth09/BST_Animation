{"version":3,"sources":["sshpk-verify"],"names":[],"mappings":"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","file":"sshpk-verify-compiled.js","sourcesContent":["#!/usr/bin/env node\n// -*- mode: js -*-\n// vim: set filetype=javascript :\n// Copyright 2015 Joyent, Inc.  All rights reserved.\n\nvar dashdash = require('dashdash');\nvar sshpk = require('../lib/index');\nvar fs = require('fs');\nvar path = require('path');\n\nvar options = [\n\t{\n\t\tnames: ['hash', 'H'],\n\t\ttype: 'string',\n\t\thelp: 'Hash algorithm (sha1, sha256, sha384, sha512)'\n\t},\n\t{\n\t\tnames: ['verbose', 'v'],\n\t\ttype: 'bool',\n\t\thelp: 'Display verbose info about key and hash used'\n\t},\n\t{\n\t\tnames: ['identity', 'i'],\n\t\ttype: 'string',\n\t\thelp: 'Path to (public) key to use'\n\t},\n\t{\n\t\tnames: ['file', 'f'],\n\t\ttype: 'string',\n\t\thelp: 'Input filename'\n\t},\n\t{\n\t\tnames: ['format', 't'],\n\t\ttype: 'string',\n\t\thelp: 'Signature format (asn1, ssh, raw)'\n\t},\n\t{\n\t\tnames: ['signature', 's'],\n\t\ttype: 'string',\n\t\thelp: 'base64-encoded signature data'\n\t},\n\t{\n\t\tnames: ['help', 'h'],\n\t\ttype: 'bool',\n\t\thelp: 'Shows this help text'\n\t}\n];\n\nif (require.main === module) {\n\tvar parser = dashdash.createParser({\n\t\toptions: options\n\t});\n\n\ttry {\n\t\tvar opts = parser.parse(process.argv);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error: %s', e.message);\n\t\tprocess.exit(3);\n\t}\n\n\tif (opts.help || opts._args.length > 1) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: sign data using an SSH key\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tif (!opts.identity) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: the -i or --identity option ' +\n\t\t    'is required\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tif (!opts.signature) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: the -s or --signature option ' +\n\t\t    'is required\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tvar keyData = fs.readFileSync(opts.identity);\n\n\tvar key;\n\ttry {\n\t\tkey = sshpk.parseKey(keyData);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error loading key \"' +\n\t\t    opts.identity + '\": ' + e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tvar fmt = opts.format || 'asn1';\n\tvar sigData = new Buffer(opts.signature, 'base64');\n\n\tvar sig;\n\ttry {\n\t\tsig = sshpk.parseSignature(sigData, key.type, fmt);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error parsing signature: ' +\n\t\t    e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tvar hash = opts.hash || key.defaultHashAlgorithm();\n\n\tvar verifier;\n\ttry {\n\t\tverifier = key.createVerify(hash);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error creating verifier: ' +\n\t\t    e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tif (opts.verbose) {\n\t\tconsole.error('sshpk-verify: using %s-%s with a %d bit key',\n\t\t    key.type, hash, key.size);\n\t}\n\n\tvar inFile = process.stdin;\n\tvar inFileName = 'stdin';\n\n\tvar inFilePath;\n\tif (opts.file) {\n\t\tinFilePath = opts.file;\n\t} else if (opts._args.length === 1) {\n\t\tinFilePath = opts._args[0];\n\t}\n\n\tif (inFilePath)\n\t\tinFileName = path.basename(inFilePath);\n\n\ttry {\n\t\tif (inFilePath) {\n\t\t\tfs.accessSync(inFilePath, fs.R_OK);\n\t\t\tinFile = fs.createReadStream(inFilePath);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error opening input file' +\n\t\t     ': ' + e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tinFile.pipe(verifier);\n\tinFile.on('end', function () {\n\t\tvar ret;\n\t\ttry {\n\t\t\tret = verifier.verify(sig);\n\t\t} catch (e) {\n\t\t\tconsole.error('sshpk-verify: error verifying data: ' +\n\t\t\t    e.name + ': ' + e.message);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (ret) {\n\t\t\tconsole.error('OK');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tconsole.error('NOT OK');\n\t\tprocess.exit(1);\n\t});\n}\n"]}