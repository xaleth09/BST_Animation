{"version":3,"sources":["crypto.js"],"names":[],"mappings":"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","file":"crypto-compiled.js","sourcesContent":["// Load modules\r\n\r\nvar Crypto = require('crypto');\r\nvar Url = require('url');\r\nvar Utils = require('./utils');\r\n\r\n\r\n// Declare internals\r\n\r\nvar internals = {};\r\n\r\n\r\n// MAC normalization format version\r\n\r\nexports.headerVersion = '1';                        // Prevent comparison of mac values generated with different normalized string formats\r\n\r\n\r\n// Supported HMAC algorithms\r\n\r\nexports.algorithms = ['sha1', 'sha256'];\r\n\r\n\r\n// Calculate the request MAC\r\n\r\n/*\r\n    type: 'header',                                 // 'header', 'bewit', 'response'\r\n    credentials: {\r\n        key: 'aoijedoaijsdlaksjdl',\r\n        algorithm: 'sha256'                         // 'sha1', 'sha256'\r\n    },\r\n    options: {\r\n        method: 'GET',\r\n        resource: '/resource?a=1&b=2',\r\n        host: 'example.com',\r\n        port: 8080,\r\n        ts: 1357718381034,\r\n        nonce: 'd3d345f',\r\n        hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',\r\n        ext: 'app-specific-data',\r\n        app: 'hf48hd83qwkj',                        // Application id (Oz)\r\n        dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz), requires options.app\r\n    }\r\n*/\r\n\r\nexports.calculateMac = function (type, credentials, options) {\r\n\r\n    var normalized = exports.generateNormalizedString(type, options);\r\n\r\n    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key).update(normalized);\r\n    var digest = hmac.digest('base64');\r\n    return digest;\r\n};\r\n\r\n\r\nexports.generateNormalizedString = function (type, options) {\r\n\r\n    var resource = options.resource || '';\r\n    if (resource &&\r\n        resource[0] !== '/') {\r\n\r\n        var url = Url.parse(resource, false);\r\n        resource = url.path;                        // Includes query\r\n    }\r\n\r\n    var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\\n' +\r\n                     options.ts + '\\n' +\r\n                     options.nonce + '\\n' +\r\n                     (options.method || '').toUpperCase() + '\\n' +\r\n                     resource + '\\n' +\r\n                     options.host.toLowerCase() + '\\n' +\r\n                     options.port + '\\n' +\r\n                     (options.hash || '') + '\\n';\r\n\r\n    if (options.ext) {\r\n        normalized += options.ext.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n');\r\n    }\r\n\r\n    normalized += '\\n';\r\n\r\n    if (options.app) {\r\n        normalized += options.app + '\\n' +\r\n                      (options.dlg || '') + '\\n';\r\n    }\r\n\r\n    return normalized;\r\n};\r\n\r\n\r\nexports.calculatePayloadHash = function (payload, algorithm, contentType) {\r\n\r\n    var hash = exports.initializePayloadHash(algorithm, contentType);\r\n    hash.update(payload || '');\r\n    return exports.finalizePayloadHash(hash);\r\n};\r\n\r\n\r\nexports.initializePayloadHash = function (algorithm, contentType) {\r\n\r\n    var hash = Crypto.createHash(algorithm);\r\n    hash.update('hawk.' + exports.headerVersion + '.payload\\n');\r\n    hash.update(Utils.parseContentType(contentType) + '\\n');\r\n    return hash;\r\n};\r\n\r\n\r\nexports.finalizePayloadHash = function (hash) {\r\n\r\n    hash.update('\\n');\r\n    return hash.digest('base64');\r\n};\r\n\r\n\r\nexports.calculateTsMac = function (ts, credentials) {\r\n\r\n    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key);\r\n    hmac.update('hawk.' + exports.headerVersion + '.ts\\n' + ts + '\\n');\r\n    return hmac.digest('base64');\r\n};\r\n\r\n\r\nexports.timestampMessage = function (credentials, localtimeOffsetMsec) {\r\n\r\n    var now = Utils.nowSecs(localtimeOffsetMsec);\r\n    var tsm = exports.calculateTsMac(now, credentials);\r\n    return { ts: now, tsm: tsm };\r\n};\r\n"]}