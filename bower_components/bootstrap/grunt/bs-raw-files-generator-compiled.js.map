{"version":3,"sources":["bs-raw-files-generator.js"],"names":[],"mappings":";;;;;;;AAOA;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AACtB,MAAI,QAAQ,EAAZ;AACA,MAAI,YAAY,SAAS,MAAzB;AACA,MAAI,WAAW,YAAY,OAAZ,GAAsB,IAArC;AACA,OAAK,IAAL,CAAU,OAAO,QAAjB,EACG,MADH,CACU,UAAU,IAAV,EAAgB;AACtB,WAAO,SAAS,OAAT,GAAmB,IAAnB,GAA0B,IAAI,MAAJ,CAAW,QAAQ,IAAR,GAAe,GAA1B,EAA+B,IAA/B,CAAoC,IAApC,CAAjC;AACD,GAHH,EAIG,OAJH,CAIW,UAAU,QAAV,EAAoB;AAC3B,QAAI,eAAe,SAAS,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAnB;AACA,UAAM,YAAN,IAAsB,SAAS,OAAT,GAAmB,KAAK,GAAG,YAAH,CAAgB,QAAhB,CAAL,CAAnB,GAAqD,GAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAA3E;AACD,GAPH;AAQA,SAAO,WAAW,IAAX,GAAkB,KAAlB,GAA0B,KAAK,SAAL,CAAe,KAAf,CAA1B,GAAkD,IAAzD;AACD;;AAED,OAAO,OAAP,GAAiB,SAAS,kBAAT,CAA4B,KAA5B,EAAmC,MAAnC,EAA2C;AAC1D,MAAI,CAAC,MAAL,EAAa;AACX,aAAS,EAAT;AACD;AACD,MAAI,OAAO,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,CAAX;AACA,MAAI,QAAQ,SAAS,KAAK,GAAL,CAAS,QAAT,EAAmB,MAAnB,CAA0B,UAAU,QAAV,EAAoB,IAApB,EAA0B;AACvE,WAAO,WAAW,IAAlB;AACD,GAFoB,EAElB,EAFkB,CAArB;AAGA,MAAI,aAAa,iCAAjB;AACA,MAAI;AACF,OAAG,aAAH,CAAiB,UAAjB,EAA6B,KAA7B;AACD,GAFD,CAEE,OAAO,GAAP,EAAY;AACZ,UAAM,IAAN,CAAW,IAAX,CAAgB,GAAhB;AACD;AACD,QAAM,GAAN,CAAU,OAAV,CAAkB,UAAU,WAAW,IAArB,GAA4B,WAA9C;AACD,CAfD","file":"bs-raw-files-generator-compiled.js","sourcesContent":["/*!\n * Bootstrap Grunt task for generating raw-files.min.js for the Customizer\n * http://getbootstrap.com\n * Copyright 2014-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar btoa = require('btoa');\nvar glob = require('glob');\n\nfunction getFiles(type) {\n  var files = {};\n  var recursive = type === 'less';\n  var globExpr = recursive ? '/**/*' : '/*';\n  glob.sync(type + globExpr)\n    .filter(function (path) {\n      return type === 'fonts' ? true : new RegExp('\\\\.' + type + '$').test(path);\n    })\n    .forEach(function (fullPath) {\n      var relativePath = fullPath.replace(/^[^/]+\\//, '');\n      files[relativePath] = type === 'fonts' ? btoa(fs.readFileSync(fullPath)) : fs.readFileSync(fullPath, 'utf8');\n    });\n  return 'var __' + type + ' = ' + JSON.stringify(files) + '\\n';\n}\n\nmodule.exports = function generateRawFilesJs(grunt, banner) {\n  if (!banner) {\n    banner = '';\n  }\n  var dirs = ['js', 'less', 'fonts'];\n  var files = banner + dirs.map(getFiles).reduce(function (combined, file) {\n    return combined + file;\n  }, '');\n  var rawFilesJs = 'docs/assets/js/raw-files.min.js';\n  try {\n    fs.writeFileSync(rawFilesJs, files);\n  } catch (err) {\n    grunt.fail.warn(err);\n  }\n  grunt.log.writeln('File ' + rawFilesJs.cyan + ' created.');\n};\n"]}