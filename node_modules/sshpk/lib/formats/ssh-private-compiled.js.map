{"version":3,"sources":["ssh-private.js"],"names":[],"mappings":"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","file":"ssh-private-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\n\t/* We only support unencrypted keys. */\n\tif (cipher !== 'none' || kdf !== 'none') {\n\t\tthrow (new Error('OpenSSH-format key is encrypted ' +\n\t\t     '(password-protected). Please use the SSH agent ' +\n\t\t     'or decrypt the key.'));\n\t}\n\n\t/* Skip over kdfoptions. */\n\tbuf.readString();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tassert.strictEqual(checkInt1, checkInt2, 'checkints do not match');\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % 8 !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString('none');\t/* cipher */\n\tbuf.writeString('none');\t/* kdf */\n\tbuf.writeBuffer(new Buffer(0));\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf.toBuffer());\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}