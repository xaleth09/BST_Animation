{"version":3,"sources":["BST.js"],"names":[],"mappings":"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","file":"BST-compiled.js","sourcesContent":["/**\r\n * Created by xaleth on 6/12/2016.\r\n * with help from http://www.2ality.com/2015/03/es6-generators.html\r\n * \"ES6 generators in Depth\" by Dr. Axel Rauschmayer\r\n *\r\n *  // Recursively traverse the tree, printing out the keys, one per line; by changing order\r\n //    of statements, can get all 6 traversals:\r\n //\r\n //    Preorder          V L R\r\n //    Inorder           L V R\r\n //    Postorder         L R V\r\n //    Reverse Preorder  V R L\r\n //    ReverseInorder    R V L\r\n //    ReversePostorder  R L V\r\n *\r\n */\r\n\r\nconst MAX_HEIGHT = 5;\r\nclass BST{\r\n\r\n    constructor(config){\r\n        this.root = null;\r\n        this.bfsArray = [];\r\n        this.height = 0;\r\n        Object.assign(this,config);\r\n    }\r\n\r\n  //Printing for Debugging Purposes\r\n    printIndentedTree(current = this.root){\r\n        console.log(\"\");\r\n        this.printIndentedTreeAux(current,\"\");\r\n        console.log(\"\");\r\n    }\r\n\r\n    printIndentedTreeAux(current, str){\r\n        if(current != null){\r\n            this.printIndentedTreeAux(current.right, str + \"   \");\r\n            console.log(str +\"\"+current.key);\r\n            this.printIndentedTreeAux(current.left, str + \"   \");\r\n        }\r\n    }\r\n\r\n    printInOrder(current = this.root){\r\n        if(current != null){\r\n            this.printInOrder(current.left);\r\n            console.log(current.key);\r\n            this.printInOrder(current.right);\r\n        }\r\n    }\r\n\r\n    printPreOrder(current = this.root){\r\n        if(current != null){\r\n            console.log(current.key);\r\n            this.printPreOrder(current.left);\r\n            this.printPreOrder(current.right);\r\n        }\r\n    }\r\n\r\n    printPostOrder(current = this.root){\r\n        if(current != null){\r\n            this.printPostOrder(current.left);\r\n            this.printPostOrder(current.right);\r\n            console.log(current.key)\r\n        }\r\n    }\r\n\r\n  //Iterator-Generators\r\n    *inOrderGen(n = this.root){\r\n        if(n.left){\r\n            yield* this.inOrderGen(n.left);\r\n        }\r\n\r\n        yield n;\r\n\r\n        if(n.right){\r\n            yield* this.inOrderGen(n.right);\r\n        }\r\n    }\r\n\r\n    *preOrderGen(n = this.root){\r\n        yield n;\r\n\r\n        if(n.left){\r\n            yield* this.preOrderGen(n.left);\r\n        }\r\n\r\n        if(n.right){\r\n            yield* this.preOrderGen(n.right);\r\n        }\r\n    }\r\n\r\n    *postOrderGen(n = this.root){\r\n        if(n.left){\r\n            yield* this.postOrderGen(n.left);\r\n        }\r\n\r\n        if(n.right){\r\n            yield* this.postOrderGen(n.right);\r\n        }\r\n\r\n        yield n;\r\n    }\r\n\r\n\r\n  /*\r\n    Utility Functions to update this BST:\r\n    insert(), remove() + removeAux(), search(), findMin(), randomBSTgen()\r\n  */\r\n\r\n    insert(keyVal, node = this.root){\r\n        if(this.height < MAX_HEIGHT){\r\n            this.root = this.insertAux(keyVal, node);\r\n            this.updateBSTAnimation();\r\n        }\r\n    }\r\n\r\n    insertAux(keyVal, node = this.root){\r\n        if(node === null){\r\n            return new Node({key: keyVal['key'], value: keyVal['value'] | 0});\r\n        }else if(keyVal['key'] < node.key){\r\n            node.left = this.insertAux(keyVal, node.left);\r\n            return node;\r\n        }else if(keyVal['key'] > node.key){\r\n            node.right = this.insertAux(keyVal, node.right);\r\n            return node;\r\n        }else{\r\n            return node;\r\n        }\r\n    }\r\n\r\n\r\n    remove(key){\r\n        this.root = this.removeAux(key, this.root);\r\n        this.updateBSTAnimation();\r\n        if(this.root == null){\r\n            tree = BST.randomBSTgen();\r\n        }\r\n    }\r\n\r\n    removeAux(key, node){\r\n        if(node == null){\r\n            return null;\r\n        }\r\n\r\n        if(key < node.key){ //go left\r\n            node.left = this.removeAux(key, node.left)\r\n            return node;\r\n        }else if(key > node.key){ //go right\r\n            node.right = this.removeAux(key, node.right);\r\n            return node;\r\n        }else{ //key == node.key\r\n            if(node.left == null && node.right == null){ //no children\r\n                return null;\r\n            }else if(node.left != null && node.right == null){ //only left child\r\n                if(node == this.root){\r\n                    node.left.numInRow = 0;\r\n                    node.left.depth = 0;\r\n                }\r\n                return node.left;\r\n            }else if(node.left == null && node.right != null){ //only right child\r\n                if(node == this.root){\r\n                    node.right.numInRow = 0;\r\n                    node.right.depth = 0;\r\n                }\r\n                return node.right;\r\n            }else{ //two children\r\n                let tmp = this.findMin(node.right);\r\n                node.key = tmp.key;\r\n                node.value = tmp.value;\r\n                node.right = this.removeAux(tmp.key, node.right);\r\n                return node;\r\n            }\r\n        }\r\n    }\r\n\r\n    findMin(node = this.root){\r\n        if(node.left == null){\r\n            return node;\r\n        }\r\n\r\n        return this.findMin(node.left);\r\n    }\r\n\r\n\r\n    search(key, curN = this.root){\r\n        if(curN == null){\r\n            return null;\r\n        }\r\n\r\n        if(key == curN.key){\r\n            return curN;\r\n        }else if(key < curN.key ){\r\n            return this.search(key, curN.left);\r\n        }else if(key > curN.key){\r\n            return this.search(key, curN.right);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Generates and returns a random BST tree\r\n    static randomBSTgen(){\r\n    var retBST = new BST();\r\n\r\n    //let numNodes = Math.floor((Math.random() * MAX_NODES) + 3);\r\n    let numNodes = 500;\r\n    for(let i = 0; i < numNodes; i++ ){\r\n        let rndKey = Math.floor((Math.random() * 30) + 1);\r\n        let rndVal = Math.floor((Math.random() * 30) + 1);\r\n        retBST.insert({key: rndKey,value: rndVal});\r\n    }\r\n\r\n    return retBST;\r\n}\r\n\r\n\r\n\r\n   /*\r\n    Utility Functions for Drawing the BST\r\n   */\r\n\r\n    //Does a BFS of the BST to update the Depth, and rowPosition values of each node,\r\n    //updates the BST property bfsArray[] which is an array of nodes\r\n    //in depth order and returns it\r\n    //The depth update and the returned array are use in updateBSTAnimation\r\n    BFSUpdate(){\r\n        let q = [];\r\n        this.bfsArray = [];\r\n\r\n        if(this.root == null){\r\n            return;\r\n        }\r\n\r\n        q.push(this.root);\r\n\r\n        while(q.length != 0){\r\n            let node = q.shift();\r\n\r\n            this.bfsArray.push(node);\r\n\r\n            if(node.left != null){\r\n                node.left.depth = node.depth+1;\r\n                node.left.numInRow = node.numInRow*2;\r\n                q.push(node.left);\r\n            }\r\n            if(node.right != null){\r\n                node.right.depth = node.depth+1;\r\n                node.right.numInRow = node.numInRow*2+1;\r\n                q.push(node.right);\r\n            }\r\n        }\r\n\r\n        this.height = this.bfsArray[this.bfsArray.length-1].depth;\r\n        return this.bfsArray;\r\n    }\r\n\r\n\r\n    //Func. that adds leaves and connecting edges (lines), that can be drawn\r\n    //to the canvas, to each node within the BST.\r\n    //This does this by using this.bfsArray[] (an array of bst nodes in depth order)\r\n    //and the nodes position in its corresponding row (node.numInRow),\r\n    //              ex.  0\r\n    //                 0    1\r\n    //                0 1  2 3,\r\n    //\r\n    //to place each leaf and line proportionally throughout the canvas\r\n    updateBSTAnimation(){\r\n        let colors = [\"black\", \"cyan\", \"green\", \"blue\", \"purple\"];\r\n        this.BFSUpdate();\r\n        if(this.bfsArray.length == 0){\r\n            return;\r\n        }\r\n\r\n\r\n        for(let n of this.bfsArray){\r\n            n.lines[\"left\"] = null;\r\n            n.lines[\"right\"] = null;\r\n            n.leaf = null;\r\n\r\n\r\n            let pow = Math.pow(2,n.depth+1);\r\n            let powPlus = Math.pow(2,n.depth+2);\r\n\r\n            let fy = canvas.height/10 + ((canvas.height/10)*(n.depth)); //Y position of leaves at N depth\r\n            let ty = canvas.height/10 + ((canvas.height/10)*(n.depth+1));\r\n\r\n            let fx = canvas.width/pow + ((canvas.width/pow)*(n.numInRow)*2) ;\r\n\r\n            if(n.left != null){\r\n                let txLeft = fx - canvas.width/powPlus;\r\n                n.lines[\"left\"] = new Line(fx, fy, txLeft, ty, colors[n.depth]);\r\n            }\r\n\r\n            if(n.right != null){\r\n                let txRight = fx + canvas.width/powPlus;\r\n                n.lines[\"right\"] = new Line(fx, fy, txRight, ty, colors[n.depth]);\r\n            }\r\n\r\n            n.leaf = new Leaf(fx,fy,{depth: n.depth, text: n.key})\r\n        }\r\n    }\r\n\r\n\r\n    draw(){\r\n        for(let n of this.bfsArray){\r\n            if(n.lines[\"left\"] != null){\r\n                n.lines[\"left\"].draw();\r\n            }\r\n            if(n.lines[\"right\"] != null){\r\n                n.lines[\"right\"].draw();\r\n            }\r\n\r\n            n.leaf.draw();\r\n        }\r\n    }\r\n}\r\n\r\nclass Node{\r\n    constructor(config){\r\n        this.left = null;\r\n        this.right = null;\r\n        this.key = 0;\r\n        this.value = 0;\r\n\r\n        //used for drawing in updateBSTAnimation();\r\n        this.depth = 0;\r\n        this.numInRow = 0;\r\n\r\n        this.lines =  {left: null, right: null};\r\n\r\n        this.leaf = new Leaf();\r\n\r\n        Object.assign(this,config);\r\n    }\r\n\r\n    /*Generator-Iteration InOrder\r\n     for(let x of tree.root){\r\n     console.log(x)\r\n     }\r\n\r\n     //this makes the object itself iterable\r\n     //in this case an In-Order Traversal\r\n     *[Symbol.iterator](){\r\n     if(this.left){\r\n     yield* this.left;\r\n     }\r\n     yield this.key;\r\n     if(this.right){\r\n     yield* this.right;\r\n     }\r\n     }\r\n     */\r\n    /*\r\n     Iterating through a Generator InOrder\r\n     for(let x of Node.prototype.inOrderGen(tree.root)){\r\n     console.log(x);\r\n     }\r\n     */\r\n    //this retuns an iterator\r\n    *inOrderGen(n){\r\n        if(n.left){\r\n            yield* this.inOrderGen(n.left);\r\n        }\r\n\r\n        yield n.key;\r\n\r\n        if(n.right){\r\n            yield* this.inOrderGen(n.right);\r\n        }\r\n    }\r\n\r\n    *preOrderGen(n){\r\n        yield n.key;\r\n\r\n        if(n.left){\r\n            yield* this.preOrderGen(n.left);\r\n        }\r\n\r\n        if(n.right){\r\n            yield* this.preOrderGen(n.right);\r\n        }\r\n    }\r\n\r\n    *postOrderGen(n){\r\n        if(n.left){\r\n            yield* this.postOrderGen(n.left);\r\n        }\r\n\r\n        if(n.right){\r\n            yield* this.postOrderGen(n.right);\r\n        }\r\n\r\n        yield n.key;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]}