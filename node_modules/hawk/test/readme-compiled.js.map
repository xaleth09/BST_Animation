{"version":3,"sources":["readme.js"],"names":[],"mappings":";;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,OAAO,QAAQ,QAAR,CAAX;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,MAAM,QAAQ,KAAR,CAAV;;;;AAKA,IAAI,YAAY,EAAhB;;;;AAKA,IAAI,MAAM,QAAQ,GAAR,GAAc,IAAI,MAAJ,EAAxB;AACA,IAAI,WAAW,IAAI,UAAnB;AACA,IAAI,KAAK,IAAI,IAAb;AACA,IAAI,SAAS,KAAK,MAAlB;;AAGA,SAAS,QAAT,EAAmB,YAAY;;AAE3B,iBAAS,MAAT,EAAiB,YAAY;;AAEzB,oBAAI,cAAc;AACd,4BAAI,cADU;AAEd,6BAAK,6CAFS;AAGd,mCAAW;AAHG,iBAAlB;;AAMA,oBAAI,UAAU;AACV,qCAAa,WADH;AAEV,mCAAW,UAFD;AAGV,+BAAO,QAHG;AAIV,6BAAK;AAJK,iBAAd;;AAOA,mBAAG,2CAAH,EAAgD,UAAU,IAAV,EAAgB;;AAE5D,4BAAI,SAAS,KAAK,MAAL,CAAY,MAAZ,CAAmB,4CAAnB,EAAiE,KAAjE,EAAwE,OAAxE,EAAiF,KAA9F;;AAEA,+BAAO,MAAP,EAAe,EAAf,CAAkB,KAAlB,CAAwB,sIAAxB;AACA;AACH,iBAND;;AAQA,mBAAG,sDAAH,EAA2D,UAAU,IAAV,EAAgB;;AAEvE,4BAAI,aAAa,KAAK,MAAL,CAAY,wBAAZ,CAAqC,QAArC,EAA+C;AAC5D,6CAAa,WAD+C;AAE5D,oCAAI,QAAQ,SAFgD;AAG5D,uCAAO,QAAQ,KAH6C;AAI5D,wCAAQ,KAJoD;AAK5D,0CAAU,mBALkD;AAM5D,sCAAM,aANsD;AAO5D,sCAAM,IAPsD;AAQ5D,qCAAK,QAAQ;AAR+C,yBAA/C,CAAjB;;AAWA,+BAAO,UAAP,EAAmB,EAAnB,CAAsB,KAAtB,CAA4B,qGAA5B;AACA;AACH,iBAfD;;AAiBA,oBAAI,iBAAiB,KAAK,KAAL,CAAW,OAAX,CAArB;AACA,+BAAe,OAAf,GAAyB,2BAAzB;AACA,+BAAe,WAAf,GAA6B,YAA7B;;AAEA,mBAAG,0DAAH,EAA+D,UAAU,IAAV,EAAgB;;AAE3E,4BAAI,SAAS,KAAK,MAAL,CAAY,MAAZ,CAAmB,4CAAnB,EAAiE,MAAjE,EAAyE,cAAzE,EAAyF,KAAtG;;AAEA,+BAAO,MAAP,EAAe,EAAf,CAAkB,KAAlB,CAAwB,2LAAxB;AACA;AACH,iBAND;;AAQA,mBAAG,qEAAH,EAA0E,UAAU,IAAV,EAAgB;;AAEtF,4BAAI,aAAa,KAAK,MAAL,CAAY,wBAAZ,CAAqC,QAArC,EAA+C;AAC5D,6CAAa,WAD+C;AAE5D,oCAAI,QAAQ,SAFgD;AAG5D,uCAAO,QAAQ,KAH6C;AAI5D,wCAAQ,MAJoD;AAK5D,0CAAU,mBALkD;AAM5D,sCAAM,aANsD;AAO5D,sCAAM,IAPsD;AAQ5D,sCAAM,KAAK,MAAL,CAAY,oBAAZ,CAAiC,eAAe,OAAhD,EAAyD,YAAY,SAArE,EAAgF,eAAe,WAA/F,CARsD;AAS5D,qCAAK,QAAQ;AAT+C,yBAA/C,CAAjB;;AAYA,+BAAO,UAAP,EAAmB,EAAnB,CAAsB,KAAtB,CAA4B,kJAA5B;AACA;AACH,iBAhBD;AAiBH,SArED;AAsEH,CAxED","file":"readme-compiled.js","sourcesContent":["// Load modules\r\n\r\nvar Code = require('code');\r\nvar Hawk = require('../lib');\r\nvar Hoek = require('hoek');\r\nvar Lab = require('lab');\r\n\r\n\r\n// Declare internals\r\n\r\nvar internals = {};\r\n\r\n\r\n// Test shortcuts\r\n\r\nvar lab = exports.lab = Lab.script();\r\nvar describe = lab.experiment;\r\nvar it = lab.test;\r\nvar expect = Code.expect;\r\n\r\n\r\ndescribe('README', function () {\r\n\r\n    describe('core', function () {\r\n\r\n        var credentials = {\r\n            id: 'dh37fgj492je',\r\n            key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\r\n            algorithm: 'sha256'\r\n        };\r\n\r\n        var options = {\r\n            credentials: credentials,\r\n            timestamp: 1353832234,\r\n            nonce: 'j4h3g2',\r\n            ext: 'some-app-ext-data'\r\n        };\r\n\r\n        it('should generate a header protocol example', function (done) {\r\n\r\n            var header = Hawk.client.header('http://example.com:8000/resource/1?b=1&a=2', 'GET', options).field;\r\n\r\n            expect(header).to.equal('Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", ext=\"some-app-ext-data\", mac=\"6R4rV5iE+NPoym+WwjeHzjAGXUtLNIxmo1vpMofpLAE=\"');\r\n            done();\r\n        });\r\n\r\n        it('should generate a normalized string protocol example', function (done) {\r\n\r\n            var normalized = Hawk.crypto.generateNormalizedString('header', {\r\n                credentials: credentials,\r\n                ts: options.timestamp,\r\n                nonce: options.nonce,\r\n                method: 'GET',\r\n                resource: '/resource?a=1&b=2',\r\n                host: 'example.com',\r\n                port: 8000,\r\n                ext: options.ext\r\n            });\r\n\r\n            expect(normalized).to.equal('hawk.1.header\\n1353832234\\nj4h3g2\\nGET\\n/resource?a=1&b=2\\nexample.com\\n8000\\n\\nsome-app-ext-data\\n');\r\n            done();\r\n        });\r\n\r\n        var payloadOptions = Hoek.clone(options);\r\n        payloadOptions.payload = 'Thank you for flying Hawk';\r\n        payloadOptions.contentType = 'text/plain';\r\n\r\n        it('should generate a header protocol example (with payload)', function (done) {\r\n\r\n            var header = Hawk.client.header('http://example.com:8000/resource/1?b=1&a=2', 'POST', payloadOptions).field;\r\n\r\n            expect(header).to.equal('Hawk id=\"dh37fgj492je\", ts=\"1353832234\", nonce=\"j4h3g2\", hash=\"Yi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\", ext=\"some-app-ext-data\", mac=\"aSe1DERmZuRl3pI36/9BdZmnErTw3sNzOOAUlfeKjVw=\"');\r\n            done();\r\n        });\r\n\r\n        it('should generate a normalized string protocol example (with payload)', function (done) {\r\n\r\n            var normalized = Hawk.crypto.generateNormalizedString('header', {\r\n                credentials: credentials,\r\n                ts: options.timestamp,\r\n                nonce: options.nonce,\r\n                method: 'POST',\r\n                resource: '/resource?a=1&b=2',\r\n                host: 'example.com',\r\n                port: 8000,\r\n                hash: Hawk.crypto.calculatePayloadHash(payloadOptions.payload, credentials.algorithm, payloadOptions.contentType),\r\n                ext: options.ext\r\n            });\r\n\r\n            expect(normalized).to.equal('hawk.1.header\\n1353832234\\nj4h3g2\\nPOST\\n/resource?a=1&b=2\\nexample.com\\n8000\\nYi9LfIIFRtBEPt74PVmbTF/xVAwPn7ub15ePICfgnuY=\\nsome-app-ext-data\\n');\r\n            done();\r\n        });\r\n    });\r\n});\r\n\r\n"]}