{"version":3,"sources":["parse.js"],"names":[],"mappings":";;;AAGA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,QAAQ,QAAQ,IAAR,CAAZ;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;;;;;;;;;;;AAYA,IAAI,WAAW,KAAK,OAAL,CAAa,SAAb,EAAwB,aAAxB,CAAf;AACA,IAAI,OAAO,GAAG,WAAH,CAAe,QAAf,CAAX;;AAEA,SAAS,UAAT,CAAoB,QAApB,EAA8B,GAA9B,EAAmC;AAC/B,QAAI,MAAM,KAAK,OAAL,CAAa,QAAb,CAAV;AACA,QAAI,WAAW,KAAK,IAAL,CAAU,QAAV,EAAoB,GAApB,EAAyB,QAAzB,CAAf;AACA,QAAI,MAAM,GAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAAV;;AAEA,aAAS,UAAT,GAAsB;AAClB,eAAO,MAAM,KAAN,CAAY,GAAZ,CAAP;AACH;;AAED,aAAS,SAAT,GAAqB;AACjB,eAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACH;;AAED,aAAS,QAAT,GAAoB;AAChB,eAAO,KAAK,sBAAsB,GAAtB,GAA4B,KAAjC,CAAP;AACH;;AAED,YAAQ,GAAR,EAAa,QAAb,IAAyB,SAAS,IAAT,GAAgB;AACrC,gBAAQ,GAAR;AACI,iBAAK,OAAL;AACI,uBAAO,SAAP,CAAiB,YAAjB,EAA+B,WAA/B,EACI,6CADJ;AAEA;AACJ,iBAAK,QAAL;AACI,uBAAO,MAAP,CAAc,SAAd,E;AACI,+DADJ;;AAGA,oBAAK,aAAa,WAAlB,EAAgC;AAC9B,2BAAO,KAAP,CAAc,MAAO,YAAP,CAAd,EAAqC,MAAO,UAAP,CAArC,EACE,4CADF;AAED,iBAHD,MAIK;AACH,2BAAO,SAAP,CAAkB,YAAlB,EAAgC,UAAhC,EACE,4CADF;AAED;AACD;AACJ,iBAAK,KAAL;AACI,uBAAO,MAAP,CAAc,SAAd,E;AACI,+DADJ;AAEA,uBAAO,YAAP,CAAoB,QAApB,E;AACI,kEADJ;AAEA,uBAAO,MAAP,CAAc,UAAd,EACI,iCADJ;AAEA;AACJ,iBAAK,MAAL;AACI,uBAAO,MAAP,CAAc,QAAd,E;AACI,8DADJ;AAEA,uBAAO,MAAP,CAAc,UAAd,EACI,iCADJ;AAEA;AA/BR;AAiCH,KAlCD;AAmCH;;AAED,KAAK,OAAL,CAAa,UAAU,GAAV,EAAe;;AAExB,YAAQ,GAAR,IAAe,EAAf;;;AAGA,QAAI,QAAQ,MAAZ,EAAoB;AAChB;AACH;;;AAGD,OAAG,WAAH,CAAe,KAAK,IAAL,CAAU,QAAV,EAAoB,GAApB,CAAf,EAAyC,OAAzC,CAAiD,UAAU,IAAV,EAAgB;AAC7D,mBAAW,IAAX,EAAiB,GAAjB;AACH,KAFD;AAGH,CAbD","file":"parse-compiled.js","sourcesContent":["// parse.js\n// Tests parse(). See readme.txt for details.\n\nvar assert = require('assert');\nvar FS = require('fs');\nvar JSON5 = require('..');\nvar Path = require('path');\n\n// Test JSON5.parse() by comparing its output for each case with either the\n// native JSON.parse() or ES5 strict-mode eval(). See readme.txt for details.\n// For eval(), remember to wrap the input in parentheses before eval()'ing,\n// since {...} is ambiguous in JavaScript. Also ensure the parentheses are on\n// lines of their own, to support inline comments.\n\n// TODO More test cases, and ones that test specific features and edge cases.\n// Mozilla's test cases are a great inspiration and reference here:\n// http://mxr.mozilla.org/mozilla-central/source/js/src/tests/ecma_5/JSON/\n\nvar dirsPath = Path.resolve(__dirname, 'parse-cases');\nvar dirs = FS.readdirSync(dirsPath);\n\nfunction createTest(fileName, dir) {\n    var ext = Path.extname(fileName);\n    var filePath = Path.join(dirsPath, dir, fileName);\n    var str = FS.readFileSync(filePath, 'utf8');\n\n    function parseJSON5() {\n        return JSON5.parse(str);\n    }\n\n    function parseJSON() {\n        return JSON.parse(str);\n    }\n\n    function parseES5() {\n        return eval('\"use strict\"; (\\n' + str + '\\n)');\n    }\n\n    exports[dir][fileName] = function test() {\n        switch (ext) {\n            case '.json':\n                assert.deepEqual(parseJSON5(), parseJSON(),\n                    'Expected parsed JSON5 to equal parsed JSON.');\n                break;\n            case '.json5':\n                assert.throws(parseJSON,        // test validation\n                    'Test case bug: expected JSON parsing to fail.');\n                // Need special case for NaN as NaN != NaN\n                if ( fileName === 'nan.json5' ) {\n                  assert.equal( isNaN( parseJSON5() ), isNaN( parseES5() ),\n                    'Expected parsed JSON5 to equal parsed ES5.');\n                }\n                else {\n                  assert.deepEqual( parseJSON5(), parseES5(),\n                    'Expected parsed JSON5 to equal parsed ES5.');\n                }\n                break;\n            case '.js':\n                assert.throws(parseJSON,        // test validation\n                    'Test case bug: expected JSON parsing to fail.');\n                assert.doesNotThrow(parseES5,   // test validation\n                    'Test case bug: expected ES5 parsing not to fail.');\n                assert.throws(parseJSON5,\n                    'Expected JSON5 parsing to fail.');\n                break;\n            case '.txt':\n                assert.throws(parseES5,         // test validation\n                    'Test case bug: expected ES5 parsing to fail.');\n                assert.throws(parseJSON5,\n                    'Expected JSON5 parsing to fail.');\n                break;\n        }\n    };\n}\n\ndirs.forEach(function (dir) {\n    // create a test suite for this group of tests:\n    exports[dir] = {};\n\n    // skip the TODO directory -- these tests are expected to fail:\n    if (dir === 'todo') {\n        return;\n    }\n\n    // otherwise create a test for each file in this group:\n    FS.readdirSync(Path.join(dirsPath, dir)).forEach(function (file) {\n        createTest(file, dir);\n    });\n});\n"]}