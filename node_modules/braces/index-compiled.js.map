{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\nvar repeat = require('repeat-element');\nvar tokens = require('preserve');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function(str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n  return braces(str, options);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch(m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n    case ' ':\n      return splitWhitespace(str);\n    case '{,}':\n      return exponential(str, opts, braces);\n    case '{}':\n      return emptyBraces(str, arr, opts);\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n  if (inner === '') { return [str]; }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n\n  } else {\n    segs = inner.split(',');\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0, val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) { return filter(arr, filterEmpty); }\n  return arr;\n}\n\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n\n  var parts = str.split('{,}');\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n\n/**\n * Handle empty braces: `{}`\n */\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n\n/**\n * Filter out empty-ish values\n */\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n\n/**\n * Handle patterns with whitespace\n */\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n  return res;\n}\n\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function(ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function(ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n\n/**\n * Regex for common patterns\n */\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n\n/**\n * Braces regex.\n */\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n\n/**\n * es6 delimiter regex.\n */\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement\n    + str.substr(i + token.length);\n}\n\n/**\n * Fast array map\n */\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n\n/**\n * Fast array filter\n */\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n  return res;\n}\n"]}